class Solution {
public:
    int longestConsecutive(vector<int>& nums) 
    {
        /*runtime error solution
        sort(nums.begin(),nums.end());
        int count=0,ans=0;
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i+1]-nums[i]==1)
            count++;
            else
            {
                ans=max(ans,count);
                count=0;
            }
        }
        ans=max(ans,count);
        return ans+1;*/
        int n=nums.size();
        if(n==0)
        return 0;
        
        unordered_set<int>st;
        for(int i=0;i<n;i++)
        {
            st.insert(nums[i]);
        }
        int ans=0;
        for(auto it:st)
        {
            if(st.find(it-1)==st.end())
            {
                int count=1;
                int x=it+1;
                while(st.find(x)!=st.end())
                {
                    count++;
                    x=x+1;
                }
                ans=max(ans,count);
            }
        }
        return ans;
    }
};
// TC: O(3*n)  SC:-O(n)
